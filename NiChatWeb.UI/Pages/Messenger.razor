@page "/messenger"
@page "/messenger/{idChat:int}"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject HubConnection hubConnection


@if (ready) //si ya cargo los mensajes
{
<div>
    <h1>Te Encuentras en @actualChat.Name</h1>
    <table class="table">
        <tr>
            <td><b>Mensajes</b></td>
        </tr>
            @foreach (var message in Messages)
            {
                <tr>
                    <td>  <b>@message.Body</b>  </td>
                    <td>  
                        <button class="btn btn-danger" @onclick="@(() => DeleteMessage(message.Id) )">Borrar</button>
                    </td>
                </tr>
            }
    </table>

</div>
}

<EditForm Model="newMessage" OnInvalidSubmit="@SendMessage">
    <div>
        <InputText @bind-Value="newMessage.Body"> </InputText>
        <button class="btn btn-success" @onclick="SendMessage" >Enviar</button>
    </div>
    <DataAnnotationsValidator></DataAnnotationsValidator>
</EditForm>




@code {
    [Parameter]public int idChat { get; set; } //el id del chat

    private Chat actualChat; //el chat actual donde nos ubicaremos
    public List<Message> Messages = new List<Message>();
    public Message newMessage { get; set; } = new Message();
    public ChatClient ChatClient;
    public User ActualUser; //el usuario actual
    bool ready = false; //para saber si ya cargo los mensajes


    protected async override Task OnInitializedAsync() //cuando cargue la pantalla
    {
        var getChatById = string.Format("/Chat/specific?id={0}", idChat.ToString()); //para obtener el chat con el id donde estamos
        actualChat = await Http.GetFromJsonAsync<Chat>(getChatById); //obtenemos el chat

        var getUSerById = string.Format("/User/specific?id={0}", 1.ToString()); //para seleccionar el usuario
        ActualUser = await Http.GetFromJsonAsync<User>(getUSerById); //obtenemos el usuario


        ChatClient = new ChatClient(ActualUser, out ready); ChatClient.StartAsync();

        ChatClient.MessageReceivedEvent += MessageReceived;
        ChatClient.MessageDeletedEvent += MessageDeleted;

        ready = await GetMessages();

    }


    public async void MessageReceived(Message newMessage) //para cuando recibimos un mensaje
    {
        Messages.Add(newMessage);          //anadimos a la lista el mensaje recibido
        await InvokeAsync(StateHasChanged);//indicamos que cambio un componente
    }

    public async void MessageDeleted(Message messageDeleted)
    {
        var ready = await GetMessages();
        if(ready)
        {
            await InvokeAsync(StateHasChanged);//indicamos que cambio un componente
        }

    }

    public async Task<bool> GetMessages() //para obtener los mensajes
    {
        var getMessagesByChat = string.Format("/Message/chat?idChat={0}", actualChat.Id.ToString()); //para obtener los mensajes del chat actual
        Messages = await Http.GetFromJsonAsync<List<Message>>(getMessagesByChat); //pedimos los mensajes del chat actual
        await InvokeAsync(StateHasChanged);
        return true; //retornamos que ya cargo todos los mensajes
    }

    public void SendMessage() //para enviar un mensaje
    {
        if(newMessage.Body != "")
        {
            Message messageSend = new Message { FChat = actualChat.Id, FUser = ActualUser.Id, Body = newMessage.Body }; //creamos el nuevo mensaje
            ChatClient.SendMessage(messageSend); //enviamos el mensaje para introducirla a la base de datos
            Messages.Add(messageSend);
            newMessage.Body = "";
        }

    }

    public async void DeleteMessage(int id)
    {
        var deleteMessage = $"/Message?id={id}";
        await Http.DeleteAsync(deleteMessage); //eliminamos el mensaje

        var messageDelete = Messages.First(x => x.Id == id); //seleccionamos el mensaje a eliminar

        await hubConnection.SendAsync("DeleteMessage", messageDelete);
        
    }

}
